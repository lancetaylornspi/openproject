This document serves as a reference guide for developers and designers with essential information about the colors used within OpenProject.
Consistent utilization of colors not only enhances the visual appeal of the application but also improves user experience by creating a cohesive and intuitive design language.



## Primer colors

Primer already offers a wide palette of color variables as well as a [clear guide](https://primer.style/foundations/color/overview) on how to use them. We follow these rules within OpenProject. Thus we gain two main advantages:

1. The Primer color system is proven to be accessible
2. Primer offers different modes (dark, high contrast, colorblind, ..) which we can simply benefit from by using their variables.

## Customization within OpenProject

OpenProject offers the possibility to customize the color palette. For that to work, we unfortunately have to overwrite some of the Primer variables so that every component matches the desired colours. Please note, that we do not adapt these colors depending on the current mode. It is in the users responsibility to select colors that work with all modes.

### Primary button color

| Variable                 | Default hex code | Usage                                                                                                       |
|--------------------------|------------------|-------------------------------------------------------------------------------------------------------------|
| `--primary-button-color` | #1F883D          | This vibrant green is used sparingly for the most important button on a screen (usually the create action). |

#### Where it's used

- Global create button in the header
- Module create button in the sidebar
- All create buttons within the pages (e.g. Work packages &rarr; Create a Work package)

#### Interaction with Primer

The following variables of Primer are overwritten with the `--primary-button-color`:

```css
/* --primer-variable: var(--openProject-variable) */

--button-primary-bgColor-rest: var(--primary-button-color) !important;
--button-primary-bgColor-hover: var(--primary-button-color--major1) !important;
```

### Accent color

| Variable         | Default hex code | Usage                                                                         |
|------------------|------------------|-------------------------------------------------------------------------------|
| `--accent-color` | #1A67A3          | This shade of blue is used for links and other decently highlighted elements. |


#### Where it's used

- All links
- Selected dates in the datepicker (e.g within a Work package)
- Toggle switch color (e.g. on the Project settings &rarr; Project attributes, or any boolean filter)

#### Interaction with Primer

The following variables of Primer are overwritten with the `--accent-color`:

```css
/* --primer-variable: var(--openProject-variable) */

--fgColor-accent: var(--accent-color) !important;
--control-checked-bgColor-rest: var(--accent-color) !important;
--control-checked-bgColor-active: var(--accent-color) !important;
--control-checked-bgColor-hover: var(--accent-color--major1) !important;
--controlKnob-borderColor-checked: var(--accent-color) !important;
```

## Accessibility considerations

When implementing colors in the application, we should ensure compliance with Primer's [accessibility standards](https://primer.style/foundations/color/accessibility).

## Attributes colors

We are following the same approach GuitHub is doing for their labels. For all configured colors, based on their hex codes and the selected mode, new values will be generated. The highlighting color values should be always visible and readable for:
- Font color
- Complete row highlighting
- Card highlighting
- Status selector
- Highlighting via bubble

There is a method that decompose the color hex code into the rgb and hsl values. While highlighting an attribute, this method should be called first:

```
def default_color_styles(hex)
  color = ColorConversion::Color.new(hex)
  rgb = color.rgb
  hsl = color.hsl

  "--color-r: #{rgb[:r]};
   --color-g: #{rgb[:g]};
   --color-b: #{rgb[:b]};
   --color-h: #{hsl[:h]};
   --color-s: #{hsl[:s]};
   --color-l: #{hsl[:l]};
   --perceived-lightness: calc( ((var(--color-r) * 0.2126) + (var(--color-g) * 0.7152) + (var(--color-b) * 0.0722)) / 255 );
   --lightness-switch: max(0, min(calc((1/(var(--lightness-threshold) - var(--perceived-lightness)))), 1));"
end
```

These two methods return default styles for defining brightness in dark and light modes:

```
def default_variables_dark
  "--lightness-threshold: 0.6;
   --background-alpha: 0.18;
   --lighten-by: calc(((var(--lightness-threshold) - var(--perceived-lightness)) * 100) * var(--lightness-switch));"
end

def default_variables_light
  "--lightness-threshold: 0.453;
   --border-threshold: 0.75;
   --border-alpha: max(0, min(calc((var(--perceived-lightness) - var(--border-threshold)) * 100), 1));"
end
```

We have defined four methods that calculate and set correct styles for highlighting background and foreground colors in dark and light modes:

```
def highlighted_background_dark
  "color: hsl(var(--color-h), calc(var(--color-s) * 1%), calc((var(--color-l) + var(--lighten-by)) * 1%)) !important;
   background: rgba(var(--color-r), var(--color-g), var(--color-b), var(--background-alpha)) !important;
   border: 1px solid hsl(var(--color-h), calc(var(--color-s) * 1%), calc((var(--color-l) + var(--lighten-by)) * 1%)) !important;"
end

def highlighted_background_light
  style = "color: hsl(0deg, 0%, calc(var(--lightness-switch) * 100%)) !important;
   background: rgb(var(--color-r), var(--color-g), var(--color-b)) !important;"
  mode = User.current.pref.theme

  if mode == "light_high_contrast"
    style += "border: 1px solid hsla(var(--color-h), calc(var(--color-s) * 1%), calc((var(--color-l) - 75) * 1%), 1) !important;"
  else
    style += "border: 1px solid hsla(var(--color-h), calc(var(--color-s) * 1%), calc((var(--color-l) - 25) * 1%), var(--border-alpha)) !important;"
  end

  style
end

def highlighted_foreground_dark
  "color: hsla(var(--color-h), calc(var(--color-s) * 1%), calc((var(--color-l) + var(--lighten-by)) * 1%), 1) !important;"
end

def highlighted_foreground_light
  mode = User.current.pref.theme

  if mode == "light_high_contrast"
    "color: hsla(var(--color-h), calc(var(--color-s) * 1%), calc((var(--color-l) - (var(--color-l) * 0.5)) * 1%), 1); !important;"
  else
    "color: hsla(var(--color-h), calc(var(--color-s) * 1%), calc((var(--color-l) - (var(--color-l) * 0.22)) * 1%), 1); !important;"
  end
end
```

By calling above methods in the following two methods, we set background and foreground styles for a color hex code for the selected mode.
First call the method for setting default styles, then call the method that sets correct styles for highlighting background and foreground colors for the selected mode(dark/light).
```
def set_background_colors_for(class_name:, hexcode:)
  mode = User.current.pref.theme.split("_", 2)[0]

  concat "#{class_name} { #{default_color_styles(hexcode)} }"
  if mode == "dark"
    concat "#{class_name} { #{default_variables_dark} }"
    concat "#{class_name} { #{highlighted_background_dark} }"
  else
    concat "#{class_name} { #{default_variables_light} }"
    concat "#{class_name} { #{highlighted_background_light} }"
  end
end

def set_foreground_colors_for(class_name:, hexcode:)
  mode = User.current.pref.theme.split("_", 2)[0]

  concat "#{class_name} { #{default_color_styles(hexcode)} }"
  if mode == "dark"
    concat "#{class_name} { #{default_variables_dark} }"
    concat "#{class_name} { #{highlighted_foreground_dark} }"
  else
    concat "#{class_name} { #{default_variables_light} }"
    concat "#{class_name} { #{highlighted_foreground_light} }"
  end
end
```

Following method is defined to set correct styles for options in colors autocompleter:

```
def color_css
  Color.find_each do |color|
    set_background_colors_for class_name: ".__hl_inline_color_#{color.id}_dot::before", hexcode: color.hexcode
    set_foreground_colors_for class_name: ".__hl_inline_color_#{color.id}_text", hexcode: color.hexcode
  end
end
```
The last method is used to highlight any attribute based on its assigned hex code color:

```
def resource_color_css(name, scope)
  scope.includes(:color).find_each do |entry|
    color = entry.color

    if color.nil?
      concat ".__hl_inline_#{name}_#{entry.id}::before { display: none }\n"
      next
    end

    if name === "type"
      set_foreground_colors_for class_name: ".__hl_inline_#{name}_#{entry.id}", hexcode: color.hexcode
    else
      set_background_colors_for class_name: ".__hl_inline_#{name}_#{entry.id}::before", hexcode: color.hexcode
    end

    set_background_colors_for class_name: ".__hl_background_#{name}_#{entry.id}", hexcode: color.hexcode
  end
end
```

## Modes

### High contrast mode

The High contrast mode in our application is a user accessibility feature designed to enhance visibility and readability for individuals with visual impairments or those
who prefer distinct visual elements. When enabled, the high contrast mode adjusts the application's color scheme, typically by increasing the contrast between text and
background, using bold fonts, and employing vibrant colors to ensure clear distinction between interface elements.
This mode aims to make content more discernible, thereby improving usability and accessibility for all users regardless of their visual abilities. The high contrast mode will be activated by following [these steps](https://www.openproject.org/docs/getting-started/my-account/#select-the-high-contrast-color-mode).

Please note, that the high contrast mode is a **personal** setting, meaning it will only affect that user and not the whole instance. Further, it will override any customized colors for that users, as the accessibility compliance is valued higher then the theme.

#### Technical notes

The goal is to use Primer variables all over the application. Once we get to that state, we can simply switch between the modes and Primer offers the correct colors. Since we are currently **not** using Primer variables everywhere yet, we have to map some of OpenProject's global color variables to the Primer color variables. We do that in [app/views/custom_styles/_primer_color_mapping.erb](https://github.com/opf/openproject/blob/dev/app/views/custom_styles/_primer_color_mapping.erb). The following is only an excerpt of that:

```css
/* --openProject-variable: var(--primer-variable) */

 --avatar-border-color: var(--avatar-borderColor);
 --ck-color-base-border: var(--borderColor-default);
 --header-bg-color: var(--page-header-bgColor);
 --main-menu-bg-color: var(--page-header-bgColor);
 --accent-color: var(--fgColor-accent);
 --primary-button-color: var(--button-primary-bgColor-rest);
 ...
```

### Dark mode

Dark mode is designed to reduce eye strain, especially in low-light environments, by using dark backgrounds and light text. It also helps in conserving battery life on devices by reducing the amount of light emitted.
Dark mode is part of our commitment to enhancing user experience by providing flexible and user-friendly interface options. Whether you are using the application for extended periods or simply prefer a darker aesthetic, dark mode is designed to meet your needs and improve your overall experience.

OpenProject dark mode offers an aesthetically pleasing alternative to the default light mode, providing a modern and sleek user interface. Please note, that the dark mode is a **personal** setting, meaning that user can easily switch between dark and light modes through the user's settings, so it only affects that user and not the whole instance.
The dark mode should be activated in My account/Settings by changing Mode to 'Dark (experimental)'. As you see, it is still in experimental state, so there may be some buggy issues in current stage.

#### Technical notes

The goal is to use Primer variables all over the application. Once we get to that state, we can simply switch between the modes and Primer offers the correct colors. Working on dark mode helps us to get closer to this goal by replacing our custom css variables with Primer css variables and removing custom color values throughout the application. Since we are currently **not** using Primer variables everywhere yet, we have to map some of OpenProject's global color variables to the Primer color variables. We do that in [app/views/custom_styles/_primer_color_mapping.erb](https://github.com/opf/openproject/blob/dev/app/views/custom_styles/_primer_color_mapping.erb). The following is only an excerpt of that:

```css
--accent-color: var(--accent-color--dark-mode);
--content-icon-color: var(--accent-color--dark-mode);
--primary-button-color: var(--primary-button-color--dark-mode);
--main-menu-bg-color: var(--overlay-bgColor);
--type-form-conf-attribute--background: var(--overlay-bgColor);
...
```

As mentioned above, we are following the rule of using dark backgrounds and light text in dark mode, therefore if in Administration/Design page you change any color except **accent** and **primary button** color, nothing will change.
We force header and main menu colors to use Primer css variables, so if you change any color of them, it won't change.

```css
--header-bg-color: var(--page-header-bgColor);
--header-item-font-color: var(--fgColor-default);
--header-item-bg-hover-color: var(--control-transparent-bgColor-hover);
--header-item-font-hover-color: var(--fgColor-default);
--header-border-bottom-color: var(--borderColor-muted) !important;
--main-menu-hover-font-color: var(--fgColor-default);
--main-menu-bg-selected-background: var(--control-transparent-bgColor-hover);
--main-menu-bg-hover-background: var(--control-transparent-bgColor-hover);
--main-menu-border-color: var(--borderColor-muted);
--main-menu-resizer-color: var(--borderColor-muted);
--main-menu-fieldset-header-color: var(--fgColor-muted) !important;
--main-menu-font-color: var(--fgColor-default);
--main-menu-selected-font-color: var(--fgColor-default);
--main-menu-bg-color: var(--page-header-bgColor);
```
